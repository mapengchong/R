### Central Limit Theorem ####

###Let's say we have a normally distributed random variable with mean 10 and sd 2 ###
var = rnorm(50000,mean=10,sd=2)

### The central limit theorem says if n > 30 the distribution of sample means approaches normal for larger N ###

### With mean = population mean ###

### And standard deviation equal to population sd / sqrt (sample size) ####

tmp = sample(var,30)
 
### First let's draw repeated samples of size 2

sample_size = 30
means = c()
for(i in 1:100)
{
  tmp = sample(var,sample_size)
  means = c(means,mean(tmp))
}

hist(means)
mean(means)
sd(means)

sd(var) / sqrt(sample_size)


###Central limit theorem on a uniform distribution

var = runif(50000,min=0,max=100)
hist(var)
mean(var)
sd(var)

sample_size = 30
means = c()
for(i in 1:100)
{
  tmp = sample(var,sample_size)
  means = c(means,mean(tmp))
}

hist(means)
mean(means)
sd(means)

sd(var) / sqrt(sample_size)


### Advanced Histograms #### 

# There a lots of good data sets available in R. 
# You can get a list of them by using command data()
# data()

# You can read about each of them by using help command. 
?AirPassengers

# You can load them into the memory by using the command 
data("AirPassengers")

# first take a look at the histogram with no additional parameters. 
hist(AirPassengers)

?hist

# axes	logical. If TRUE (default), axes are draw if the plot is drawn.
# We set here axes to FALSE 
# We make a vector for the lables of x-axis. 
x <- seq(100, 700, by = 50)

results <- hist(AirPassengers, breaks = x, axes = FALSE, main="Histogram for Air Passengers 1949-1960", 
                xlab = "Monthly Airline Passenger Numbers",  
                border="blue", 
                col="green", 
                ylim=c(0,25), xlim = c(100, 700)  )

# You can read some of the properties of histogram.
print(results)

# Read the documentation about axis 
?axis

# Now, we make the x-asis labels
axis(1, las=1, at = x, labels=x)

# Now, we make a vector for the y-axis lables based on our own requirments. 
ylables<- c(0, 2, 4, 5, 10, 13, 15, 20, 25)

# And this is the y-axis labels.
# axis(2, las=1, at = ylables, labels=ylables,  cex.axis = 1.2, font = 2)

# Or you can use the counts of your histogram result values 
axis(2, las=1, at = results$counts, labels=results$counts,  cex.axis = 1.2, font = 2)

# Here, we make some horizontal lines on the histogram. Just for fun :) 
# In the case that you want to have some horizontal lines on the histogram. 
abline(h = 4, col = "red" )

# a Dashed Line 
# abline(h=13,  col = "blue", lwd=1, lty=3)

abline(h=13,  col = "blue", lwd=3, lty="dashed")

# Values for lty are the strings "blank", "solid", "dashed", "dotted", "dotdash", "longdash", and "twodash". 
# Alternatively, the numbers 0 to 6 can be used (0 for "blank", 1 for "solid", ...).

### Skewness of Distributions ###

#  The Skew-Normal and Related Distributions

# the following library can also be used to generate skewed data 
# install.packages("sn")
# library(sn)
# rightSkewed <- rsn(n=10000, xi = 9,  omega = 10, alpha = 7)
# leftSkewed <- rsn(n=10000, xi = 1,  omega = 5, alpha = 1, tau = 1)


# we use beta distribution to generate skewed data 

# set the random initial start as constant value 
set.seed(1)

# generate 3 different data sets. 

leftSkewed <- rbeta(4000,9,1.2)*40
rightSkewed <- rbeta(4000,1,9)*40
normalData<-rnorm(4000, mean = 20, sd=5)


# Begin with visualization. 

######################################################

par(mfrow=c(1,3))
######################################################

hist(leftSkewed, 
     probability=T, nclass=max(leftSkewed)-min(leftSkewed)+1, 
     col='lightblue', 
     main='Left Skewed' , border = F)

lines(density(leftSkewed,bw=1), col='red', lwd=3)

# plot(density(leftSkewed), main='Left Skewed' , col='red', lwd=3, type="l")


abline(v=mean(leftSkewed), col='blue', lwd=3)
abline(v=median(leftSkewed), col='green', lwd=3)

text(mean(leftSkewed)+2, .19, "Mean", cex = 1.6, col='blue')
text(mean(leftSkewed)+2, .20, "Median", cex = 1.6, col='green')


######################################################



hist(normalData, 
     probability=T, nclass=max(normalData)-min(normalData)+1, 
     col='lightblue', 
     main='Normal', border = F)


lines(density(normalData,bw=1), col='red', lwd=3)

#plot(density(normalData), main='Normal' , col='red', lwd=3, type="l")

abline(v=mean(normalData), col='blue', lwd=3)
abline(v=median(normalData), col='green', lwd=3)


######################################################




hist(rightSkewed, 
     probability=T, nclass=max(rightSkewed)-min(rightSkewed)+1, 
     col='lightblue', 
     main='Right Skewed', border = F)
ines(density(rightSkewed,bw=1), col='red', lwd=3)

# plot(density(rightSkewed), main='Right Skewed' , col='red', lwd=3, type="l")


abline(v=mean(rightSkewed), col='blue', lwd=3)
abline(v=median(rightSkewed), col='green', lwd=3)


text(mean(rightSkewed)-3, .12, "Mean", cex = 1.6, col='blue')
text(mean(rightSkewed)-3, .13, "Median", cex = 1.6, col='green')


######################################################
#     Optional Material - Skeweness tests 
######################################################

# Some good reference to read about it 
# https://en.wikipedia.org/wiki/Skewness
# https://help.gooddata.com/display/doc/Normality+Testing+-+Skewness+and+Kurtosis


# Test implementation in R 
# https://www.r-bloggers.com/measures-of-skewness-and-kurtosis/


# One time installation of moments package is needed. 
 install.packages("moments")
library(moments)



# SKEWNESS Test. 
# As a general rule of thumb:
# If skewness is less than -1 or greater than 1, the distribution is highly skewed.
# If skewness is between -1 and -0.5 or between 0.5 and 1, the distribution is moderately skewed.
# If skewness is between -0.5 and 0.5, the distribution is approximately symmetric.


# KURTOSIS
# Kurtosis tells you the height and sharpness of the central peak, relative to that of a standard bell curve.

# Values for a right Skewed, Positive  Skewed. 
skewness(rightSkewed)
kurtosis(rightSkewed)


# Values for a left Skewed, Negative Skewed 
skewness(leftSkewed)
kurtosis(leftSkewed)


# Values for a Normal Distribution
skewness(normalData)
kurtosis(normalData)

###Values for a uniform distribution
uniformData = runif(5000,min=0,max=1)

hist(uniformData)
skewness(uniformData)
kurtosis(uniformData)
