### SIMPLE R VISUALIZATIONS ###

### Reading data into R ###

###Change the file path to match your location
days <- read.csv("/Users/pengchongma/Desktop/Lecture_1/Example_Data.csv", header = FALSE)

### Data with a header
golf = read.csv("/Users/pengchongma/Desktop/Lecture_1/GolfBals.csv",header=T)


###Summary statistics on a particular variable

golf$distance

mean(golf$distance)
median(golf$distance)
min(golf$distance)
max(golf$distance)
quantile(golf$distance)

var(golf$distance)
sd(golf$distance)


###Skewed Mean and median

###Generate a skewed variable
variable = c(rep(30,50),rep(35,30),rep(40,20),rep(65,5),70,75,80,120)

###Add some random noise to it
variable = variable + runif(length(variable),min=0,max=7)

variable


###Basic histogram
hist(variable)

###Compute the mean of the variable
mean(variable)

###Compute the median
median(variable)

###Qualitative data summaries

##Class counts
table(golf$brand)

###Pie chart of class counts
pie(table(golf$brand))

###Barplot of class counts
barplot(table(golf$brand))


###Class frequencies
table(golf$brand)/nrow(golf)

###Barplot of class frequencies with titles
barplot(table(golf$brand)/nrow(golf),main="Golf Balls by Brand",xlab="Brand",ylab="Frequency")


###Summary of golf data
summary(golf)

####Histogram of golf data
hist(golf$distance)
hist(golf$distance,bins=2)
hist(golf$distance,breaks=c(255,265,275,285,295))

###Boxplot of golf data
boxplot(golf$distance)


###Draw 100 samples from a normal distribution with mean 3500 and standard deviation 500
babyData <- rnorm(100, mean = 3500, sd=500)


# Create two plots side by cide 
# First we set the parameters, mfrow allows you to layout plots side by side
par(mfrow=c(1,2)) # Make device region 1 by 2

# Here the first plot which is a histogram 
hist(babyData, prob=TRUE, col="cyan", main=" Happy Sunday")

# Line is not a plot command so that it goes to the previous plot command. 
lines(density(babyData),lwd=3,col="red")

# Here is the second plot command
plot(density(babyData),lwd=3,col="red",main="")

# now the title 
title(main="Density Plot")

# And now set back the par to the originial setting. 
# This step is a good practice so that you set the par back to what it was. 
par(mfrow=c(1,1))


# We want to visualize the normal distribution curve and color some part of it. 

# Define a vector
x <- seq(from = -3, to = 3, length.out = 100)

# Apply the distribution density function to the vector
y <- dnorm(x)

# Plot it
plot(x, y, type="l")

# Shade an area from -1 to 1: define the area by specifying points along the outer edges and then use polygon function to fill the shape
xvalues <- x[x>=-1 & x<=1]
yvalues <- y[x>=-1 & x<=1]
region.x <- c(xvalues[1], xvalues, tail(xvalues, 1))
region.y <- c(0, yvalues, 0)

# print out the region.x to see what is inside. 
region.x
region.y

polygon(region.x, region.y, col="navy")


###Another way to visualize the normal distribution curve ###

# Define a vector
x <- seq(from = -3, to = 3, length.out = 100)

# Define a vector
curve(dnorm(x), xlim=c(-3,3), main='Normal Density')

# To shade the region represented by P(-3 < X < -2). 

# The first vertex we want for our polygon is (-3,0). 
cord.x <- c(-3)
cord.y <- c(0)

# The 2nd vertex will be (-3, f(-3)), f(-3) is the normal density evaluated at -3. 
cord.x <- c(cord.x, -3) 
cord.y <- c(cord.y, dnorm(-3)) 

# The 3rd and 4th vertices are (-2,f(-2)) and (-2,0)
cord.x <- c(cord.x, -2, -2)
cord.y <- c(cord.y, dnorm(-2), 0)

# Now, we can use the polygon function and color parts in skyblue color. 
polygon(cord.x, cord.y, col="skyblue")
#### Code examples for handling normal distributions and solving problems related to normal distributions ####

### Load up the normal distribution using rnorm ###
babyData <- rnorm(1000, mean = 3500, sd=500)

###Confirm this is normally distributed ###
hist(babyData)

# Here is the second plot command
plot(density(babyData),lwd=3,col="red",main="")

###What is the probability a baby weighs less than 4000 grams?? ###

#Compute Z-Score
zscore = (4000-3500)/500

# Get probability less than Z from Standard Normal Distribution
pnorm(zscore)

# OR can do this directly using the mean and sd parameters
pnorm(4000,mean=3500,sd=500)

?pnorm

### What is the value of the normal density curve at 3500 in the plot?
dnorm(4000,mean=3500,sd=500)

###What percent of infants weigh between 3750 and 3250 grams?
pnorm(3750,mean=3500,sd=500) - pnorm(3250,mean=3500,sd=500)

###What percent of infants weigh ABOVE 4000 grams
pnorm(4000,mean=3500,sd=500,lower.tail=F)

###What value captures x % of the distribution? What value of newborn weight makes the P(X <= x) == p

#mean captures 50% of the distribution
qnorm(0.5,mean=3500,sd=500)

qnorm(0.75,mean=3500,sd=500)



#### Let's compute one of these answers, empirically from our data?

### What percent of newborns weigh less than 4000 grams?

###Remember the pnorm answer using an "idealized" view of the data
pnorm(4000,mean=3500,sd=500)

###How many of our babies actually weighed less than 4000 grams?
babyData < 4000

sum(babyData < 4000)

sum(babyData<4000) / length(babyData)



###These functions require normally distributed data!

# Uniformly distributed random variable
babyData = runif(1000,min=2000,max=5000)

# Get summary stats
hist(babyData)
mean(babyData)
sd(babyData)


###Assume normality and find percent of babies weighing less than 4000 grams
pnorm(4000,mean=mean(babyData),sd=sd(babyData))

# Compute actual numbers from the data
sum(babyData<4000)/length(babyData)

# No matter how big our sample size is, these values will continue to be off
### Code examples for demonstrating how outliers appear in the data and how boxplots detect them ###

days <- read.csv("Datasets/Example_Data.csv", header = FALSE)
# To convert and flatten data from a data frame you can use the unlist command. 

myDays <- unlist(days, use.names=FALSE)
# myDays is now a simple vector data type that I can work with. 

# Now plot the boxplot
boxplot(myDays)

# add manually an outlier here 
myDays <-c(myDays, 45)

# Now plot the boxplot
boxplot(myDays)

summary(myDays)
# you can turn the outlier detection off by setting outline=FALSE
boxplot(myDays, outline=FALSE)


